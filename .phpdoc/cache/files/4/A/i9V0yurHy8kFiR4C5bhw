1707349179
waR3U4bTeM%3A048e7c829e963c283d32cf3507b36a4d-3c2334a5064331ac743bd54d9842fbae
s:22328:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"3c2334a5064331ac743bd54d9842fbae";s:39:" phpDocumentor\Reflection\Php\File name";s:25:"AnnotationManagerTest.php";s:39:" phpDocumentor\Reflection\Php\File path";s:102:"vendor/allure-framework/allure-php-api/test/Yandex/Allure/Adapter/Annotation/AnnotationManagerTest.php";s:41:" phpDocumentor\Reflection\Php\File source";s:7616:"<?php

namespace Yandex\Allure\Adapter\Annotation;

use PHPUnit\Framework\TestCase;
use Yandex\Allure\Adapter\Event\TestCaseStartedEvent;
use Yandex\Allure\Adapter\Event\TestSuiteStartedEvent;
use Yandex\Allure\Adapter\Model\DescriptionType;
use Yandex\Allure\Adapter\Model\ParameterKind;
use Yandex\Allure\Adapter\Model\SeverityLevel;
use Yandex\Allure\Adapter\Model\Label;
use Yandex\Allure\Adapter\Model\LabelType;

class AnnotationManagerTest extends TestCase
{
    public function testUpdateTestSuiteStartedEvent(): void
    {
        $instance = new Fixtures\ExampleTestSuite();
        $testSuiteAnnotations = AnnotationProvider::getClassAnnotations($instance);
        $annotationManager = new AnnotationManager($testSuiteAnnotations);
        $event = new TestSuiteStartedEvent('some-name');
        $annotationManager->updateTestSuiteEvent($event);

        $this->assertEquals('test-suite-title', $event->getTitle());
        $this->assertEquals('test-suite-description', $event->getDescription()->getValue());
        $this->assertEquals(DescriptionType::MARKDOWN, $event->getDescription()->getType());
        $this->assertEquals(8, sizeof($event->getLabels()));

        //Check features presence
        $epics = $this->getLabelsByType($event->getLabels(), LabelType::EPIC);
        $this->assertEquals(2, sizeof($epics));
        $index = 1;
        foreach ($epics as $epic) {
            $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $epic);
            $this->assertEquals("test-suite-epic$index", $epic->getValue());
            $index++;
        }

        //Check features presence
        $features = $this->getLabelsByType($event->getLabels(), LabelType::FEATURE);
        $this->assertEquals(2, sizeof($features));
        $index = 1;
        foreach ($features as $feature) {
            $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $feature);
            $this->assertEquals("test-suite-feature$index", $feature->getValue());
            $index++;
        }

        //Check stories presence
        $stories = $this->getLabelsByType($event->getLabels(), LabelType::STORY);
        $this->assertEquals(2, sizeof($stories));
        $index = 1;
        foreach ($stories as $story) {
            $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $story);
            $this->assertEquals("test-suite-story$index", $story->getValue());
            $index++;
        }

        //Check issues presence
        $issues = $this->getLabelsByType($event->getLabels(), LabelType::ISSUE);
        $this->assertEquals(2, sizeof($issues));
        $index = 1;
        foreach ($issues as $issue) {
            $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $issue);
            $this->assertEquals("test-suite-issue$index", $issue->getValue());
            $index++;
        }

    }

    public function testUpdateTestCaseStartedEvent(): void
    {
        $instance = new Fixtures\ExampleTestSuite();
        $testCaseAnnotations = AnnotationProvider::getMethodAnnotations($instance, 'exampleTestCase');
        $annotationManager = new AnnotationManager($testCaseAnnotations);
        $event = new TestCaseStartedEvent('some-uid', 'some-name');
        $annotationManager->updateTestCaseEvent($event);

        //Check scalar properties
        $this->assertEquals('test-case-title', $event->getTitle());
        $this->assertEquals('test-case-description', $event->getDescription()->getValue());
        $this->assertEquals(DescriptionType::HTML, $event->getDescription()->getType());
        $this->assertEquals(13, sizeof($event->getLabels()));

        //Check id presence
        $ids = $this->getLabelsByType($event->getLabels(), LabelType::ID);
        $this->assertEquals(1, sizeof($ids));
        $id = array_pop($ids);
        $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $id);
        $this->assertSame("123", $id->getValue());

        //Check epic presence
        $epics = $this->getLabelsByType($event->getLabels(), LabelType::EPIC);
        $this->assertEquals(2, sizeof($epics));
        $index = 1;
        foreach ($epics as $epic) {
            $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $epic);
            $this->assertEquals("test-case-epic$index", $epic->getValue());
            $index++;
        }

        //Check feature presence
        $features = $this->getLabelsByType($event->getLabels(), LabelType::FEATURE);
        $this->assertEquals(2, sizeof($features));
        $index = 1;
        foreach ($features as $feature) {
            $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $feature);
            $this->assertEquals("test-case-feature$index", $feature->getValue());
            $index++;
        }

        //Check stories presence
        $stories = $this->getLabelsByType($event->getLabels(), LabelType::STORY);
        $this->assertEquals(2, sizeof($stories));
        $index = 1;
        foreach ($stories as $story) {
            $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $story);
            $this->assertEquals("test-case-story$index", $story->getValue());
            $index++;
        }

        //Check issues presence
        $issues = $this->getLabelsByType($event->getLabels(), LabelType::ISSUE);
        $this->assertEquals(2, sizeof($issues));
        $index = 1;
        foreach ($issues as $issue) {
            $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $issue);
            $this->assertEquals("test-case-issue$index", $issue->getValue());
            $index++;
        }

        //Check custom labels presence
        $customs = $this->getLabelsByType($event->getLabels(), "custom-name");
        $this->assertEquals(3, sizeof($customs));
        $index = 1;
        foreach ($customs as $custom) {
            $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $custom);
            $this->assertEquals("custom-value-$index", $custom->getValue());
            $index++;
        }

        //Check severity presence
        $severities = $this->getLabelsByType($event->getLabels(), LabelType::SEVERITY);
        $this->assertEquals(1, sizeof($severities));
        $severity = array_pop($severities);
        $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Label', $severity);
        $this->assertSame(SeverityLevel::BLOCKER, $severity->getValue());

        //Check parameter presence
        $parameters = $event->getParameters();
        $this->assertEquals(1, sizeof($parameters));
        $parameter = array_pop($parameters);

        $this->assertInstanceOf('Yandex\Allure\Adapter\Model\Parameter', $parameter);
        $this->assertSame('test-case-param-name', $parameter->getName());
        $this->assertSame('test-case-param-value', $parameter->getValue());
        $this->assertSame(ParameterKind::ARGUMENT, $parameter->getKind());
    }

    private function getLabelsByType(array $labels, string $labelType): array
    {
        $filteredArray = array_filter(
            $labels,
            function ($element) use ($labelType) {
                return ($element instanceof Label) && ($element->getName() === $labelType);
            }
        );
        uasort(
            $filteredArray,
            function (Label $l1, Label $l2) {
                $label1Value = $l1->getValue();
                $label2Value = $l2->getValue();
                if ($label1Value === $label2Value) {
                    return 0;
                }

                return ($label1Value < $label2Value) ? -1 : 1;
            }
        );

        return $filteredArray;
    }
}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:1:{s:33:"\Yandex\Allure\Adapter\Annotation";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:33:"\Yandex\Allure\Adapter\Annotation";s:36:" phpDocumentor\Reflection\Fqsen name";s:10:"Annotation";}}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:55:"\Yandex\Allure\Adapter\Annotation\AnnotationManagerTest";O:35:"phpDocumentor\Reflection\Php\Class_":13:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:55:"\Yandex\Allure\Adapter\Annotation\AnnotationManagerTest";s:36:" phpDocumentor\Reflection\Fqsen name";s:21:"AnnotationManagerTest";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";N;s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:27:"\PHPUnit\Framework\TestCase";s:36:" phpDocumentor\Reflection\Fqsen name";s:8:"TestCase";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:0:{}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:3:{s:90:"\Yandex\Allure\Adapter\Annotation\AnnotationManagerTest::testUpdateTestSuiteStartedEvent()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:90:"\Yandex\Allure\Adapter\Annotation\AnnotationManagerTest::testUpdateTestSuiteStartedEvent()";s:36:" phpDocumentor\Reflection\Fqsen name";s:31:"testUpdateTestSuiteStartedEvent";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:16;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:69;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:36:"phpDocumentor\Reflection\Types\Void_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:89:"\Yandex\Allure\Adapter\Annotation\AnnotationManagerTest::testUpdateTestCaseStartedEvent()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:89:"\Yandex\Allure\Adapter\Annotation\AnnotationManagerTest::testUpdateTestCaseStartedEvent()";s:36:" phpDocumentor\Reflection\Fqsen name";s:30:"testUpdateTestCaseStartedEvent";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:71;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:158;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:36:"phpDocumentor\Reflection\Types\Void_":0:{}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}s:74:"\Yandex\Allure\Adapter\Annotation\AnnotationManagerTest::getLabelsByType()";O:35:"phpDocumentor\Reflection\Php\Method":12:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:74:"\Yandex\Allure\Adapter\Annotation\AnnotationManagerTest::getLabelsByType()";s:36:" phpDocumentor\Reflection\Fqsen name";s:15:"getLabelsByType";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"labels";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:9:"labelType";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\String_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:160;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Method endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:182;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Array_":3:{s:12:" * valueType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:10:" * keyType";N;s:17:" * defaultKeyType";O:39:"phpDocumentor\Reflection\Types\Compound":2:{s:52:" phpDocumentor\Reflection\Types\AggregatedType types";a:2:{i:0;O:38:"phpDocumentor\Reflection\Types\String_":0:{}i:1;O:38:"phpDocumentor\Reflection\Types\Integer":0:{}}s:52:" phpDocumentor\Reflection\Types\AggregatedType token";s:1:"|";}}s:57:" phpDocumentor\Reflection\Php\Method hasReturnByReference";b:0;s:45:" phpDocumentor\Reflection\Php\Method metadata";a:0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:14;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:48:" phpDocumentor\Reflection\Php\Class_ endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:183;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:45:" phpDocumentor\Reflection\Php\Class_ metadata";a:0:{}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";